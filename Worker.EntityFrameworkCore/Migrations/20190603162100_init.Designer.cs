// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Worker.EntityFrameworkCore;

namespace Worker.EntityFrameworkCore.Migrations
{
    [DbContext(typeof(ControllerDbContext))]
    [Migration("20190603162100_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062");

            modelBuilder.Entity("Worker.Core.Models.Card", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<DateTime>("DeleteTime");

                    b.Property<long>("EmployerId");

                    b.Property<string>("ExternalId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Md5");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Uid");

                    b.HasKey("Id");

                    b.HasIndex("EmployerId");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("Worker.Core.Models.Controller", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Alias");

                    b.Property<DateTime>("CreationTime");

                    b.Property<DateTime>("DeleteTime");

                    b.Property<string>("ExternalId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("LastSync");

                    b.Property<string>("SecretKey");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Version");

                    b.HasKey("Id");

                    b.ToTable("Сontrollers");
                });

            modelBuilder.Entity("Worker.Core.Models.ControllerConfig", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CoreId");

                    b.Property<DateTime>("CreationTime");

                    b.Property<DateTime>("DeleteTime");

                    b.Property<string>("ExternalId");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("SyncPolicy");

                    b.Property<DateTime>("SyncTime");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("CoreId")
                        .IsUnique();

                    b.ToTable("ControllerConfigs");
                });

            modelBuilder.Entity("Worker.Core.Models.Device", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BleUuid");

                    b.Property<DateTime>("CreationTime");

                    b.Property<DateTime>("DeleteTime");

                    b.Property<long>("EmployerId");

                    b.Property<string>("ExternalId");

                    b.Property<bool>("IsDeleted");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("EmployerId");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("Worker.Core.Models.Employer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccessLevel")
                        .IsRequired();

                    b.Property<DateTime>("CreationTime");

                    b.Property<DateTime>("DeleteTime");

                    b.Property<string>("ExternalId");

                    b.Property<bool>("IsDeleted");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("Worker.Core.Models.Fingerprint", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<DateTime>("DeleteTime");

                    b.Property<long>("EmployerId");

                    b.Property<string>("Hash");

                    b.Property<string>("InTerminalId");

                    b.Property<bool>("IsDeleted");

                    b.Property<long?>("TerminalId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("EmployerId");

                    b.HasIndex("TerminalId");

                    b.ToTable("Fingerprints");
                });

            modelBuilder.Entity("Worker.Core.Models.Terminal", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessLevel");

                    b.Property<string>("Alias");

                    b.Property<long>("ControllerId");

                    b.Property<DateTime>("CreationTime");

                    b.Property<DateTime>("DeleteTime");

                    b.Property<string>("ExternalId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("LastActivity");

                    b.Property<string>("Mac");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Version");

                    b.HasKey("Id");

                    b.HasIndex("ControllerId");

                    b.ToTable("Terminals");
                });

            modelBuilder.Entity("Worker.Core.Models.TerminalConfig", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CoreId");

                    b.Property<DateTime>("CreationTime");

                    b.Property<DateTime>("DeleteTime");

                    b.Property<string>("ExternalId");

                    b.Property<int>("FingetTimeoutMs");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("Mode");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("ViewName");

                    b.Property<string>("WifiConf");

                    b.HasKey("Id");

                    b.HasIndex("CoreId")
                        .IsUnique();

                    b.ToTable("TerminalConfigs");
                });

            modelBuilder.Entity("Worker.Core.Models.Card", b =>
                {
                    b.HasOne("Worker.Core.Models.Employer", "Employer")
                        .WithMany("Cards")
                        .HasForeignKey("EmployerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Worker.Core.Models.ControllerConfig", b =>
                {
                    b.HasOne("Worker.Core.Models.Controller", "Core")
                        .WithOne("Config")
                        .HasForeignKey("Worker.Core.Models.ControllerConfig", "CoreId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Worker.Core.Models.Device", b =>
                {
                    b.HasOne("Worker.Core.Models.Employer", "Employer")
                        .WithMany("Devices")
                        .HasForeignKey("EmployerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Worker.Core.Models.Fingerprint", b =>
                {
                    b.HasOne("Worker.Core.Models.Employer", "Employer")
                        .WithMany("Fingerprints")
                        .HasForeignKey("EmployerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Worker.Core.Models.Terminal", "Terminal")
                        .WithMany("Fingerprints")
                        .HasForeignKey("TerminalId");
                });

            modelBuilder.Entity("Worker.Core.Models.Terminal", b =>
                {
                    b.HasOne("Worker.Core.Models.Controller", "Controller")
                        .WithMany("Terminals")
                        .HasForeignKey("ControllerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Worker.Core.Models.TerminalConfig", b =>
                {
                    b.HasOne("Worker.Core.Models.Terminal", "Core")
                        .WithOne("Config")
                        .HasForeignKey("Worker.Core.Models.TerminalConfig", "CoreId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
